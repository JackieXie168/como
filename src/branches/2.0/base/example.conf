# $Id$
# This is a sample configuration file for CoMo. 
# Blank lines and comments are ok and long lines can be split with a \
# at the end

# Edit this file to suit and save it as como.conf

# Directory where the output data of all modules reside. 
# This is mandatory. 
#
db-path     "/tmp/data"  

# Directory where the modules reside.
# This is mandatory. 
librarydir  "../modules"  

# Memory (in MBytes) allocated to the CAPTURE process 
# to maintain the state used by all modules. The more 
# modules, the more memory is needed. (Default: 64 MB)
#
#memsize	64  # in megabytes

# TCP Port number the QUERY process uses to accept new 
# requests from users. (Default: 44444)
#
#query-port	44444
 
# Node information. The following information is reported 
# by the node when it receives a ?status query. 
#
#name  		"CoMo Node"
#location 	"Unknown" 
#type 		"Unknown"
#comment	"None"

# Virtual nodes. It is possible to define virtual nodes 
# that run the same set of modules of the main node but 
# on a subset of traffic. The virtual nodes would reply 
# to queries on a dedicated port number
#
#virtual-node   "example"
#  location     "Unknown"
#  type		"Unknown"
#  query-port   55555
#  filter       "udp and port 53"
#  source	"tuple"
#end


# Sniffer to be used (only one is supported at the moment) 
# The format is: 
#    sniffer <sniffer_type> <iface/filename> [<options>] 
#
# At least one sniffer is mandatory
#
#sniffer "bpf" "xl0" "snaplen=1500"
#sniffer "pcap"	"/path/to/pcap-file.dump"
#sniffer "libpcap" "eth0" "snaplen=112 promisc=1 timeout=1"
#sniffer "wpcap" "2" "snaplen=112&promisc=1&timeout=1"
#sniffer "dag" "/dev/dag0" "slen=1536 varlen"
#sniffer "erf" "/path/to/erf-file.dump"
#sniffer "sk98"	"sk0" 
#sniffer "flowtools" "/path/to/flow-tools/ft-*" "iface=57 sampling=1000 stream"
#sniffer "como"	"http://localhost:44444/?module=trace&format=como&time=-5m:0"
#sniffer "radio" "wlan0" "monitor=hostap"
#sniffer "sflow" "10.0.0.1" "port=6343 flow_type_tag=HEADER"
#sniffer "netflow" "10.0.0.2" "port=9991 compact"
#
sniffer        "bpf" "xl0"

# Log messages that are printed to stdout. 
# Valid keywords are 
#
#   ui:  	User Interface
#   warn: 	Warning messages
#   mem: 	Memory manager
#   conf:  	Configuration 
#   ca:  	CAPTURE process
#   ex:  	EXPORT process
#   st:  	STORAGE process
#   qu:  	QUERY process
#   sniff:  	Sniffers 
#   timer: 	Timers 
#   ipc: 	Inter Process Comms 
#   all:	All log messages
#
# the flag v- (or verbose-) can be added in front of any 
# keyword (e.g., v-warn) to request verbose logging. 
# (Default: warn,ui)
#
# logflags	warn,ui	

#
# Set the maximum size of each individual file in the
# stream for each module. Any denominator (KB,MB,GB) can be
# used, however filesize must be less than 1GB. (default: 128MB)
#
#filesize 128MB


# Modules. 
# This is an example with all keywords currently implemented. 
#
# module "example"
#   description	"Config sample" # description (default: <empty>) 
#   source	"example.so"	# module shared object (default: example.so)
#   output	"example"	# output file (default: example)
#   filter      "tcp"	# select packets of interest (default: ALL)
#   streamsize	256MB		# max output file size (default: 256MB)
#   hashsize	1		# estimated concurrent entries (default: 1)
#   memsize	1024		# private memory in bytes (default: 0)
#   streamsize  10GB		# stream size on disk (default: 256MB)
#   args	"name = value"	# arguments to be passed to the module. 
#   args-file	"path/to/file"  # specify a file from where to read arguments.
#   running	"on-demand"     # specify running mode (default: normal)
# end

#
# Syntax of the filter for a module:
#
# The following expressions can be combined with
# "not", "and", "or" keywords and parenthesis:
#
# - protocol:
#       ip/tcp/udp/icmp
# - ip address and netmask:
#       src/dst xxx.xxx.xxx.xxx (only dots and numbers: host IP)
#       src/dst xxx.xxx.xxx.xxx/yy (dots and numbers/CIDR notation)
# - port: 
#       sport/dport xxxxx (just 1 port)
#       sport/dport xxxxx:yyyyy (a set of ports)
# - interaces: 
#       input/output xxxxx (it only works with NetFlow data)
# - from_ds / to_ds:
#       IEEE 802.11 packets coming from or going to access point
#
# The "all" keyword can also be used to specify an all-pass filter.
#
# Examples:
#
#   filter  "all"
#   filter  "ip"
#   filter  "tcp"
#   filter  "src 192.168.1.0/24 and dst 192.168.1.1"
#   filter  "tcp and src 10.213.54.6 and sport 5000:6000"
#   filter  "udp and (not(sport 21) or src 64.32.234.9/31)"
#   filter  "input 53 and udp"
#

module "trace"
    source "traceCC"
    description "Packet trace"
    streamsize 1GB
    #priority 0
end

module "ethtypes"
    source "ethtypesCC"
    description "Ethernet types"
end

module "flowcount"
    source "flowcountCC"
    description "Flow counter"
end

module "protocol"
    source      "protocolCC"
    description "Protocol Breakdown"
    filter	"ip"
end

module "topaddr"
    source      "topaddrCC"
end

module "tophwaddr"
    source      "tophwaddrCC"
end

module "topports"
    description "Top destination port numbers in bytes"
    source      "topportsCC"
    filter      "tcp or udp"
    #args        "interval = 5" "topn = 10"
end


module "traffic"
    source 	"trafficCC"
    description "Packet/Bytes counter"
    #args	"interval = 1" # measurement interval (secs)
    streamsize 1GB
end

module "tuple"
    description "Active flows (5 tuple)"
    source      "tupleCC"
    filter      "ip" 
    hashsize	100000
end


#module "netflow-anon"
#    hashsize    100000
#end

#module "application"
#    description "Application Breakdown (using port numbers)"
#    filter	"tcp"
#    output	"apps"
#    args	"interval = 5"		# measurement interval (secs)
#end
   
    
#module "protocolv6"
#    description "Protocol Breakdown for IPv6 packets"
#    filter	"isIPv6"
#    output	"protov6"
#    source	"protocolv6.so"
#    hashsize	256
#end

#module "topdest"
#    description "Top IP destinations in bytes"
#    filter      "ip"
#    output	"top10"
#    source	"topdest.so"
#    hashsize    100000
#    args        "interval = 5" "topn = 10"
#end


#module "connx"
#    description "Active flows (5 tuple, with idle timeout)"
#    filter      "ip" 
#    hashsize	100000
#    args	"idle-timeout=60"	# flow termination timeout
#end

#module "utilization"
#    description "Utilization and High Watermark (100ms)" 
#end

#module "alert"
#    description "Exponentially Weighted Moving Average Anomaly Detection Filter"
##    source "anomaly-ewma.so"
#end

#module "list"
#    description "AP Neighbor List"
#    hashsize    256
#end

#module "frames"
#    description "IEEE802.11 frame statistics"
#    args        "interval = 1"          # measurement interval (secs)
#end

#module "macssi"
#   description "IEEE802.11 received signal strength and noise level per MAC"
#end

#module "assoc"
#   description "IEEE802.11 associations between MAC addresses"
#   args        "interval = 1"
#end

#module "snort"
#    description "Interprets and runs Snort rules"
#    filter      "ip"
#    streamsize  1GB
#    memsize     20000000
#    # Path of the file that contains the rules
#    args        "$../modules/snort.rules"
#end

#module "interarrival"
#    description "Packet timestamps for each 5-tuple"
#    filter      "ip"
#    hashsize    100000
#end


*/
