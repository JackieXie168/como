# $Id$
#
# gmake Makefile for the entire CoMo software
#
# XXX note that gmake has bugs which are triggered by this file.
# On FreeBSD, we need gmake 3.80 because 3.79 does not work,
# and even 3.80 has problems with variable expansions that
# we needed to circumvent.
#
# This file is only supposed to exist in the top directory,
# where it is included by children. It stores the common variables
# used for the compilation, such as CFLAGS, DEFS and the like.
#
# One or more programs and/or modules can be built from each subdirectory
# containing sources: such directories can define the subsequent (optional)
# variables in their own "como.gmk" file:
#   PROGS           - list of programs to be built
#   SRCS_progname   - sources of program "progname"
#   INCDIRS         - directories where includes are looked for
#   LIBDIRS         - directories where libraries are looked for
#   LIBS[_progname] - library to link with ("lib" prefix should be omitted)
# If a name in $(PROGS) ends in .so then the program is built as a shared lib.
#
# A BASEDIR variable *must* be defined.
#
# Dynamically loadable modules (for handlers) are expected to reside
# in the directory MODULEDIR (defaults to 'modules/').
# The list of sources (one for each module) should be put in the
# variable 'MODULES', without the leading directory name which
# will be prepended automatically.
# See the example below.
#

ifdef BUILD_FOR_ARM
	# we need a cross-platform compiler
	CC = arm-linux-gcc
	DEFS+=-DBUILD_FOR_ARM 
	WARNINGS?=-W -Wall -Werror -Wshadow 
endif

# CFLAGS is set to something very pedantic, and for good reasons, so
# please do not alter them.

# We want to detect as many problems in the source as possible,
# hence the large number of -W flags we use.
WARNINGS?=-W -Wall -Werror -Wshadow -Wcast-align

# We cannot include Wconversion due to compiler's brokennes when
# dealing with mode_t arguments e.g. in mkdir(), umask() etc.
# WARNINGS += -Wconversion # broken on some platforms

# Debug flags
DBGFLAGS?=-g

# Optimization flags
# OPTFLAGS?=-O2

INSTALL=/usr/bin/install

# Install dirs
PREFIX?=/usr/local
INST_BINDIR?=$(DESTDIR)$(PREFIX)/bin
INST_LIBDIR?=$(DESTDIR)$(PREFIX)/lib/como-$(COMOVER)
INST_DATADIR?=$(DESTDIR)$(PREFIX)/var/lib/como-$(COMOVER)
INST_MANDIR?=$(DESTDIR)$(PREFIX)/share/man/man1
DEFAULT_CFGFILE?=$(PREFIX)/etc/como/como.conf

# #define's used to build this version of the code.
COMOVER = 0.99
DEFS +=	-DCOMO_VERSION=\"$(COMOVER)\" \
	-DDEFAULT_LIBDIR=\"$(INST_LIBDIR)\" \
	-DDEFAULT_BASEDIR=\"$(INST_DATADIR)\" \
	-DDEFAULT_CFGFILE=\"$(DEFAULT_CFGFILE)\"

# You are really not supposed to touch this!
# Here we have a lot of make magic to compute actual file names
# and dependencies in a compact way.

ifeq ($(shell uname),Linux)
	# Next one is required to use 64bit off_t on Linux
	# See http://ac-archive.sourceforge.net/largefile/
	DEFS+=-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64

	LIBDL=dl
endif

ifndef BASEDIR
all:
	$(error "BASEDIR variable not defined")
endif

# INCDIRS and LIBDIRS are whitespace separated list of directories; they should
# not include "-I" and "-L" prefixes (which are automatically prepended)
# It's quite difficult to have sensible defaults for these variables
# INCDIRS?=../libs/hf
# LIBDIRS?=../libs/hf
INCDIRS+=$(BASEDIR)/include 
INCDIRS+=$(BASEDIR)/extra 
INCOPTS= $(INCDIRS:%=-I%) -I. -I..

# Force the inclusion of 'os.h' by all programs, which provides
# os-dependent customization.

CFLAGS+= \
	$(DBGFLAGS) \
	$(WARNINGS) \
	$(OPTFLAGS) \
	$(INCOPTS) \
	$(DEFS) \
	-include $(BASEDIR)/include/os.h

LIBOPTS= \
	$(LIBDIRS:%=-L%) \
	$(LIBS:%=-l%)

# The directory where modules reside. Leave this unchanged unless
# you have good reasons to.
MODULEDIR=modules

# Prepend $(MODULEDIR) to all names in $(MODULES)
x=$(MODULES:C/^/$(MODULEDIR)\//)

# compute the list of modules (with .so extensions)
modules_so=$(x:.c=.so)

INSTALLS = $(addprefix install-,$(PROGS)) \
	   $(addprefix install-,$(MODULES)) \
	   $(addprefix install-,$(MANS))

all:	$(PROGS) $(MODULES) $(OTHER)

.PHONY: clean install mkinstalldirs $(INSTALLS)

install: all mkinstalldirs $(INSTALLS) 
	@echo "install done."

mkinstalldirs:
	@echo -n "Creating install directories... "
	@test -d $(INST_BINDIR) || mkdir -p $(INST_BINDIR)
	@test -d $(INST_LIBDIR) || mkdir -p $(INST_LIBDIR)
	@test -d $(INST_DATADIR) || mkdir -p $(INST_DATADIR)
	@test -d $(INST_MANDIR) || mkdir -p $(INST_MANDIR)
	@echo "ok."

clean:
	rm -rf $(PROGS) $(MODULES) $(OTHER) $(TEMPORARY) *.core *.pid core.* \
		$(foreach PG, $(PROGS), $(OBJS_$(PG))) \
                $(foreach MO, $(MODULES), $(OBJS_$(MO)))

# The suffixes we care about:
.SUFFIXES:	.c .o .so .po .y .l

# The default rule to build a module from the (single) source
.c.so:
	$(CC) $(CFLAGS) -shared -Wl,-x -o $(@) $(^)

#.c.po:
#	$(CC) $(CFLAGS) -fpic -DPIC -c $(^) -o $(@)

.c.o:
	$(CC) $(CFLAGS) $(CFLAGS_$(PROG)) -c $(<) -o $(@)

# Default rules to build flex and bison parsers 
# (for the Snort module and the filters)

filter-%.c : PREFIX = f
snort-%.c : PREFIX = s

.l.c:
	flex -Py$(PREFIX) -t $(<) > $(@)
.y.c: 
	bison -p y$(PREFIX) -o $(@) $(<)

# Template rule to compile multiple programs
# XXX NOTE the workaround for a bug in gmake on FreeBSD:
# long list of dependencies cause memory corruption.
# So we need to accumulate dependencies
# using a foreach loop, and then run a final rule

define compilation

$(eval OBJS_$(PROG) := $(SRCS_$(PROG):.c=.o))

#.c.o:
#	echo "$(CC) $(CFLAGS) $(CFLAGS_$(PROG)) -c $(^) -o $(@)"

$(foreach o,$(OBJS_$(PROG)),$(eval $(o) : $(DEPS_$(PROG))))

$(foreach o,$(OBJS_$(PROG)),$(eval $(PROG) : $o))
$(PROG):
ifeq ("$(suffix $(PROG))",     ".so")
	@echo "building shared lib $(PROG)"
	$$(CC) $$(CFLAGS) -shared -Wl,--export-dynamic -o $$(@) $$(^) \
		$$(LIBOPTS) $$(LIBS_$(PROG):%=-l%)
else
	@echo "building program $(PROG)"
	$$(CC) $$(CFLAGS) -Wl,--export-dynamic -o $$(@) $$(^) \
		$$(LIBOPTS) $$(LIBS_$(PROG):%=-l%)
endif

install-$(PROG):
	@echo "install($(PROG))"
	@$$(INSTALL) -m 0755 $(PROG) $$(INST_BINDIR)/$(PROG)
endef

# Template rule to compile a module from several source files

define module_compilation

$(eval OBJS_$(MODULE) := $(SRCS_$(MODULE):.c=.o))

$(foreach o,$(OBJS_$(MODULE)),$(eval $(o) : $(DEPS_$(MODULE))))

$(foreach o,$(OBJS_$(MODULE)),$(eval $(MODULE) : $o))
$(MODULE): $(addsuffix .c,$(basename $(MODULE))) 
	@echo "building module $(MODULE)"
	$$(CC) $$(CFLAGS) -shared -Wl,-x -o $$(@) $$(^) \
		$$(LIBOPTS) $$(LIBS_$(MODULE):%=-l%)

install-$(MODULE):
	@echo "install($(MODULE))"
	@$$(INSTALL) -m 0755 $(MODULE) $$(INST_LIBDIR)/$(MODULE)
endef

# The template rule is instantiated as needed for each particular program
$(foreach PROG,$(PROGS),$(eval $(compilation)))

# This template rule is instantiated as needed for each module
$(foreach MODULE,$(MODULES),$(eval $(module_compilation)))

### end of file ###
