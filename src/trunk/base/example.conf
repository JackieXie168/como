# $Id$
# This is a sample configuration file for CoMo. 
# Blank lines and comments are ok and long lines can be split with a \
# at the end

# Edit this file to suit and save it as como.conf

# Directory where the output data of all modules reside. 
# This is mandatory. 
#
basedir     "/tmp/data"  

# Directory where the modules reside.
# This is mandatory. 
librarydir  "../modules"  

# Memory (in MBytes) allocated to the CAPTURE process 
# to maintain the state used by all modules. The more 
# modules, the more memory is needed. (Default: 64 MB)
#
#memsize	64  # in megabytes

# TCP Port number the QUERY process uses to accept new 
# requests from users. (Default: 44444)
#
#query-port	44444
 
# Node information. The following information is reported 
# by the node when it receives a ?status query. 
#
#name  		"CoMo Node"
#location 	"Unknown" 
#linkspeed 	"Unknown"
#comment	"None"


# Sniffer to be used (only one is supported at the moment) 
# The format is: 
#    sniffer <sniffer_type> <iface/filename> [<options>] 
#
# At least one sniffer is mandatory
#
#sniffer "libpcap" "eth0" "snaplen=112&promisc=1&timeout=1"
#sniffer "pcap"	"/path/to/pcap-file.dump"
#sniffer "sk98"	"sk0" 
#sniffer "bpf" "xl0" "snaplen=1500"
#sniffer "dag" "/dev/dag0" "slen=1536 varlen useISL"
#sniffer "erf" "/path/to/erf-file.dump"
#sniffer "dump"	"http://localhost:44444/?module=trace&format=dump&start=0"
#sniffer "flowtools" "/path/to/flow-tools/ft-*" "iface=57 scale=1000 stream"
#
sniffer	"bpf" "xl0"

# Log messages that are printed to stdout. 
# Valid keywords are 
#
#   ui:  	User Interface
#   warn: 	Warning messages
#   mem: 	Memory manager
#   conf:  	Configuration 
#   ca:  	CAPTURE process
#   ex:  	EXPORT process
#   st:  	STORAGE process
#   qu:  	QUERY process
#   sniff:  	Sniffers 
#   debug: 	Debugging messages
#   all:	All log messages
#
# the flag v- (or verbose-) can be added in front of any 
# keyword (e.g., v-warn) to request verbose logging. 
# (Default: warn,ui)
#
# logflags	warn,ui	

# Drop recording configuration
# Where do we record drops to?
drop-log "drop_file"
# How much disk space can we devote to drop logs?
drop-log-size 1G

# Modules. 
# This is an example with all keywords currently implemented. 
#
# module "example"
#
#   # mandatory entries 
#   source	"example.so"	# module shared object 
#   output	"example"	# output file
#
#   # optional entries 
#   description	"Example of module configuration"
#   filter      "proto(TCP)"	# select packets of interest (default: ALL)
#   streamsize	256MB		# max output file size (default: 256MB)
#   blocksize	1024		# maximum record size on file (default: 1024)
#   hashsize	1		# estimated concurrent entries (default: 1)
#   memsize	1024		# private memory in bytes (default: 0)
#   streamsize  10GB		# stream size on disk (default: 256MB)
#   args	"name = value"	# arguments to be passed to the module. 
#   min-flush	0		# capture flush intervals in ms. use with 
#   max-flush	1000		# caution! capture will respect them and if 
                                # not given enough flexibility may result in
				# shutting down the module or using up all 
				# memory. (default: min 0, max 1000)
# end

module "trace"
    description "Packet trace"
    filter      "ALL"
    output      "trace"
    source      "trace.so"
    hashsize    1
    blocksize   2048
    streamsize  1GB
end

#module "netflow"
#    description "Netflow v5"
#    filter	"ALL"
#    output	"netflow"
#    source	"netflow.so"
#    hashsize	1027
#    blocksize	32768
#end

module "counter"
    description "Packet/Bytes counter"
    filter 	"ALL"
    output 	"counter"
    source	"counter.so"
    hashsize    1      
    blocksize   1024
    min-flush	1000
    max-flush	1000
    args	"granularity = 1"		# measurement interval (secs)
end

module "application"
    description "Application Breakdown (using port numbers)"
    filter	"isIP and proto(TCP)"
    output	"apps"
    source	"application.so"
    hashsize	1
    blocksize	1024
    min-flush	5000
    max-flush	5000
    args	"granularity = 5"		# measurement interval (secs)
end
    
module "protocol"
    description "Protocol Breakdown"
    filter	"isIP"
    output	"proto"
    source	"protocol.so"
    hashsize	256
    blocksize	1024
    min-flush	1000
    max-flush	1000
end
    
#module "protocolv6"
#    description "Protocol Breakdown for IPv6 packets"
#    filter	"isIPv6"
#    output	"protov6"
#    source	"protocolv6.so"
#    hashsize	256
#    blocksize	1024
#    min-flush	1000
#    max-flush	1000
#end

module "topdest"
    description "Top-10 IP destinations in bytes"
    filter      "isIP"
    output	"top10"
    source	"topdest.so"
    hashsize    100000
    blocksize   1024
end

module "tuple"
    description "Active flows (5 tuple)"
    filter      "isIP" 
    output	"tuple"
    source	"tuple.so"
    hashsize	100000
    blocksize   1024
    min-flush   1000 
    max-flush   1000 
end

module "connx"
    description "Active flows (5 tuple, with idle timeout)"
    filter      "isIP" 
    output	"connx"
    source	"connx.so"
    hashsize	100000
    blocksize  1024
end

module "utilization"
    description "Utilization and High Watermark (100ms)" 
    filter      "ALL" 
    output	"utilization"
    source	"utilization.so"
    hashsize	1
    blocksize   1024
end

#module "snort"
#    description "Interprets and runs Snort rules"
#    filter      "ALL"
#    output      "snort"
#    source      "snort.so"
#    hashsize    1
#    blocksize   65575 # BUF_SIZE + 37 (sizeof(snort_hdr))
#    memsize     10000
#    streamsize  256MB
#    min-flush   1000 
#    max-flush   1000
#    args        "alert tcp any any -> any 80 (msg:\"Web Traffic\";)"
#end

### general example rules ###
#    args        "alert tcp 147.83.130.30/32 any -> any 80 (content:\"GET /\";)" "log udp !192.168.1.0/24 any -> 192.168.1.20/32 53" "alert icmp [147.83.130.36/32,147.83.130.43/32] any <> 147.83.130.30/32 any (content:\"12|33 34|567\";)"
#
# General example rules:
# - The first rule logs and alerts about all tcp traffic from the specified
#   host to port 80 with the content "GET" in the payload
# - The second rule logs all udp traffic that does not come from the local
#   class C network, and goes to the specified host's port 53
# - The third rule logs and alerts about all icmp traffic in both directions
#   between the specified hosts, with the specified content in the payload
#

### TEST 1: pcre ###
#    args        "alert icmp [147.83.130.36/32,147.83.130.43/32] any <> 147.83.130.30/32 any (pcre:123.*67;)" "alert tcp 147.83.130.30/32 any <> any 80 (pcre:G.+T;)"

### TEST 2: offset, depth options ###
#    args        "alert icmp [147.83.130.36/32,147.83.130.43/32] any <> 147.83.130.30/32 any (content:\"12|33 34|567\"; depth:50; offset:100;)"

### TEST 3: activate / dynamic rules test ###
#   args        "activate icmp 147.83.130.36/32 any <> 147.83.130.30/32 any (activates:1;)" "dynamic icmp 147.83.130.43/32 any <> 147.83.130.30/32 any (activated-by:0; count:20;)"

### TEST 4: nocase, classtype, sid, rev test ###
#    args        "alert tcp 147.83.130.30/32 any <> any 80 (content:get; nocase;)" "log udp !192.168.1.0/24 any -> 192.168.1.20/32 53" "alert icmp [147.83.130.36/32,147.83.130.43/32] any <> 147.83.130.30/32 any (msg:\"ICMP traffic on the local network\"; sid:1; rev:1; classtype:icmp-event; content:\"12|33 34|567\";)"

# you can use a precompiled filter, in which case you say it now:
#
#   filter      "myfilter.so"
#
# or you can specify traffic-matching patterns for each module,
# which are then compiled into a global filter.

